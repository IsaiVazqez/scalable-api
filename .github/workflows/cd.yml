name: cd

on:
  workflow_run:
    workflows: ["ci"]         # corre solo cuando "ci" termine
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            SHA="${{ github.event.workflow_run.head_sha }}"
            echo ">>> Deploying scalable-api $SHA"

            sudo mkdir -p /opt/scalable && sudo chown $USER:$USER /opt/scalable
            cd /opt/scalable

            # Genera docker-compose (sin 'version:' porque es obsoleto)
            cat > docker-compose.prod.yml <<YAML
            services:
              api:
                image: ghcr.io/isaivazqez/scalable-api:${SHA}
                pull_policy: always
                container_name: scalable_api
                restart: unless-stopped
                environment:
                  ASPNETCORE_ENVIRONMENT: Production
                  ASPNETCORE_URLS: http://+:8080
                ports:
                  - "80:8080"
            YAML

            # Login a GHCR con tu PAT guardado como secret "TOKEN"
            echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u isaivazqez --password-stdin

            # Pull con reintentos por posible latencia de propagaci√≥n en GHCR
            for i in {1..10}; do
              if docker pull ghcr.io/isaivazqez/scalable-api:${SHA}; then
                break
              fi
              echo "Imagen a√∫n no disponible, reintentando ($i/10)..."
              sleep 6
            done

            # Arranque / recreaci√≥n
            docker compose -f docker-compose.prod.yml up -d

            echo ">>> Healthcheck (con reintentos)"
            for i in {1..30}; do
              if curl -fsS -X POST http://localhost/graphql \
                -H "Content-Type: application/json" \
                -d '{"query":"{ ping }"}' > /dev/null; then
                echo "OK: servicio responde."
                exit 0
              fi
              echo "A√∫n no est√° listo, reintentando ($i/30)..."
              sleep 2
            done

            echo "Healthcheck failed. √öltimos logs del contenedor:"
            docker logs --tail 200 scalable_api
            exit 1